*** Pour enlever les champs vides d'un formulaire avant la récupération des données en JavaScript ***

function nettoyerFormulaire(formulaire) {
  const formData = new FormData(formulaire);
  const donneesNettoyees = {};

  for (const [key, value] of formData.entries()) {
    if (value.trim() !== "") { // Vérifie si la valeur n'est pas juste des espaces
      donneesNettoyees[key] = value;
    }
  }

  return donneesNettoyees;
}

// Exemple d'utilisation
const monFormulaire = document.getElementById('monFormulaire');
const donnees = nettoyerFormulaire(monFormulaire);

console.log(donnees);

// Ici, 'donnees' contiendra un objet avec les champs non vides.

*** (Methode 2) Pour enlever les champs vides d'un formulaire avant la récupération des données en JavaScript ***

function supprimerChampsVides(formulaire) {
  const champs = formulaire.elements;
  for (let i = 0; i < champs.length; i++) {
    const champ = champs[i];
    if (champ.value === "") {
      formulaire.removeChild(champ);
      i--; // Ajuster l'indice après la suppression
    }
  }
}

// Exemple d'utilisation
const formulaire = document.getElementById("monFormulaire");
supprimerChampsVides(formulaire);

// Maintenant, vous pouvez récupérer les données du formulaire
// sans les champs vides.

*****Vous pouvez lire et manipuler le contenu d'un fichier HTML , puis l'écrire à nouveau****

    const fs = require('fs');

    // Lire le fichier
    fs.readFile('index.html', 'utf8', (err, data) => {
      if (err) {
        console.error(err);
        return;
      }
      // Manipuler la donnée
      const newData = data.replace('ancien texte', 'nouveau texte');

      // Écrire dans le fichier
      fs.writeFile('index.html', newData, (err) => {
        if (err) {
          console.error(err);
        }
      });
    });
    

   
 ***** lire page html contenant des fichier statique une image ou js ou css..  en Node js  ****

const http= require("http"), fs= require("fs"), path = require('path');

const serveur = http.createServer((req, rep) => {
  // Déterminer le chemin du fichier demandé
  var pg_adr = '.' + req.url;
  if (pg_adr === './') { pg_adr = './index.html'; }// Par défaut, afficher index.html

  // Déterminer le type de contenu
  const xson= String(path.extname(pg_adr)).toLowerCase();
  const c_typ = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
  };
  const Cnu = c_typ[xson] || 'application/octet-stream';

  // Lire le fichier
  fs.readFile(pg_adr, (err, info) => {
    if (err) { console.log(err);} 
    else {// Succès, envoyer le contenu
      rep.setHeader('Content-Type',Cnu);
      rep.end(info, 'utf-8');}
    
  });
});

serveur.listen(3004, "localhost",() => { console.log(`Emission serveur`);
});

 ***** lire page html contenant une image  en Node js /2  ****

const http = require('http');
const fs = require('fs');
const path = require('path');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  if (req.url === '/') {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/html');
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Affichage d'image</title>
      </head>
      <body>
        <h1>Image affichée</h1>
        <img src="/imageTest2.jpg" alt="Description de l'image">
      </body>
      </html>
    `;
    res.end(html);
  } else if (req.url === '/imageTest2.jpg') {
    const imagePath = path.join(__dirname, 'imageTest2.jpg');
    fs.readFile(imagePath, (err, data) => {
      if (err) {
        res.statusCode = 404;
        res.end('Image not found');
        return;
      }
      res.statusCode = 200;
      res.setHeader('Content-Type', 'image/jpeg');
      res.end(data);
    });
  } else {
    res.statusCode = 404;
    res.end('Not Found');
  }
});

server.listen(port, hostname, () => {
  console.log(`Serveur lancé sur http://${hostname}:${port}/`);
});
